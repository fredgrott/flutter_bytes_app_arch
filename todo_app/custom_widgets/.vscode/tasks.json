{ 
  // Tasks in VSCode doc
  // https://code.visualstudio.com/docs/editor/tasks
  "version": "2.0.0",
  "tasks": [
    {
      // build an android apk
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "apk"],
      "group": "build",
      "problemMatcher": [],
      "label": "flutter: flutter build apk"
    },
    {
      // build and ios app
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "ios"],
      "group": {
        "kind": "build"
      },
      "problemMatcher": [],
      "label": "flutter: flutter build ios"
    },
    {
      // build web app
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "web"],
      "group": "build",
      "problemMatcher": [],
      "label": "flutter: flutter build web"
    },
    {
      // build linux app
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "linux"],
      "group": "build",
      "problemMatcher": [],
      "label": "flutter: flutter build linux"
    },
    {
      // build windows app
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "windows"],
      "group": "build",
      "problemMatcher": [],
      "label": "flutter: flutter build windows"
    },
    {
      // build macos
      "type": "flutter",
      "command": "flutter",
      "args": ["build", "macos"],
      "group": "build",
      "problemMatcher": [],
      "label": "flutter: flutter build macos"
    },

    {
      // install a flutter app
      "type": "flutter",
      "command": "flutter",
      "args": ["install"],
      "problemMatcher": [],
      "label": "flutter: flutter install"
    },
    {
      // get flutter(dart) packages
      "type": "flutter",
      "command": "flutter",
      "args": ["pub", "get"],
      "problemMatcher": [],
      "label": "flutter: flutter pub get"
    },

    {
      // upgrade flutter packages
      "type": "flutter",
      "command": "flutter",
      "args": ["pub", "upgrade"],
      "problemMatcher": [],
      "label": "flutter: flutter pub upgrade"
    },

    // Other Tool Tasks
    // build runner's build task
    // per this article to integrate with trigger task on
    // save plugin
    // https://erayerdin.com/integrating-darts-build-runner-with-vscode-cl20eq19604zgy6nv47ir51ap
    {
      "label": "build_runner-build", // this label will be useful later
      "type": "flutter",
      "command": "flutter",
      "args": [
        "pub",
        "run",
        "build_runner",
        "build",
        "lib/", // only scan lib dir
        "--delete-conflicting-outputs" // do not ask to delete conflicting files
      ],
      "presentation": {
        "echo": true, // write logs
        "reveal": "silent", // i don't wanna see the terminal window
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false // i wanna see logs when I want
      },
      "problemMatcher": ["$dart-build_runner"],
      "group": "build",
      "detail": ""
    },

    {
      // build runner
      "label": "build_runner-watch",
      "type": "flutter",
      "command": "flutter",
      "args": [
        "pub",
        "run",
        "build_runner",
        "watch", // the same stuff but watching this time
        "lib/",
        "--delete-conflicting-outputs"
      ],
      "presentation": {
        "echo": true,
        "reveal": "always", // show output for watch tasks
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": ["$dart-build_runner"],
      "group": "build",
      "detail": ""
    },

    {
      // plantuml
      "type": "flutter",
      "command": "flutter",
      "args": [
        "pub",
        "global",
        "run",
        "dcdg",
        "--search-path=lib",
        "--output=reports\\docs\\diagrams\\src\\diagrams.puml"
      ],
      "problemMatcher": [],
      "label": "flutter: dcdg"
    },

    {
      // code coverage
      "type": "flutter",
      "command": "flutter",
      "args": [
        "test",
        "--coverage",
        "--reporter=expanded",
        "--coverage-path=.\\reports\\coverage\\lcov.info"
      ],
      "problemMatcher": [],
      "label": "flutter: test coverage lcov.info gen"
    },

    {
      // analyze
      "type": "flutter",
      "command": "flutter",
      "args": [
        "analyze",
        ">",
        ".\\reports\\analyzer_report.txt",
        "--no-fatal-infos --no-fatal-warnings"
      ],
      "problemMatcher": [],
      "label": "flutter: analyze report gen"
    },

    {
      
      "windows": {
        "command": "perl",
        "args": [
          "C://ProgramData//chocolatey//lib//lcov//tools//bin//genhtml reports//coverage//lcov.info",
          "-o reports//coverage//html"
        ]
      },
      
      "linux": {
        "command": "perl",
        "args": [
          "genthml reports//coverage//lcov.info",
          "-o reports//coverage//html"
        ]
      },
      "type": "shell",
      "osx": {
        "command": "perl",
        "args": [
          "genhtml reports//coverage///lcov.info",
          "-o reports//coverage/html"
        ]
      },
      "dependsOn": ["flutter: test coverage lcov.info gen"],
      "problemMatcher": [],
      "label": "flutter: lcov.info into html"
    },

    // per https://pub.dev/packages/junitreport
    {
      "type": "flutter",
      "command": "flutter",
      "args": [
        "test",
        "--machine",
        "|",
        "tojunit",
        "--output",
        "reports\\test\\unittest.xml"
      ],
      "problemMatcher": [],
      "label": "flutter: unit test xml"
    },

    // this is the only place where we break best practices of defining each plat shell as
    // there are no plat differences for running the pythong junit2html script
    {
      "type": "shell",
      "command": "junit2html",
      "args": ["reports\\test\\unittest.xml", "reports\\test\\unittest.html"],
      "dependsOn": ["flutter: unit test xml"],
      "problemMatcher": [],
      "label": "Flutter: unit test html"
    }
  ]
}
